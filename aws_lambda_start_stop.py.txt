from datetime import datetime
import boto3, re,time
import dateutil

region = 'us-east-1'
ec2 = boto3.client('ec2', region_name=region)


def lambda_handler(event, context):

    startstop_instances()


def check_start_stop_schedule(AutoShutdownSchedule):
    #print('check_start_stop_schedule')
    print(f"....AutoShutdownSchedule : {AutoShutdownSchedule}")
    # get currect UTC time 
    #utcnow = datetime.utcnow()
    london_tz = dateutil.tz.gettz('Europe/London')
    utcnow = datetime.now(tz=london_tz)
    
    weekday_now = utcnow.strftime("%A")
    hour_now = int(utcnow.strftime("%H"))
    minutes_now = utcnow.strftime("%M")
    date_now = datetime(utcnow.year,utcnow.month,utcnow.day,int(hour_now),int(minutes_now) )
    print(f"....Current London time  : {date_now}-{weekday_now}-{hour_now}'o clock")
    
    #check AutoShutdownSchedule
    schedules = AutoShutdownSchedule.split(',')
    #print(f"....Schedules found = {len(schedules)}")
    
    #find schedule matching the current day ex. Monday . Tuesday etc
    pattern = re.compile(f'^{weekday_now}.*$')
    schedules_today = [ s for s in schedules if pattern.match(s) ]
    print(f"....Instance's scheduled time today '{weekday_now}' : {schedules_today} ")
    if not schedules_today:
        print(f"....There is no schedule found today '{weekday_now}' for this Instance")
        return False
    schedule = schedules_today[0]
    stop_time = schedule.split(':')[1]
    start_time = schedule.split(':')[2]
    print(f"....Scheduled Start :{start_time}'o clock , Scheduled Stop : {stop_time}'o clock , Now : {hour_now}'o clock.")
    
    if stop_time == 24 and start_time == 24:
        print("....Start time and stop time is 24 : Skip the operation")
        return False
    
    #check if start and stop time is equal in the schedule
    if stop_time == start_time:
        print("....Start time and stop time is equal : Skip the operation")
        return False
      
    #check if stop time fall in this hour , if so sent "stop" to calling function
    if  int(stop_time) == hour_now:
        print("....Instance is scheduled to STOP now")
        return "stop"
        
    #check if start time fall in this hour , if so sent "start" to calling function
    if  int(start_time) == hour_now:
        print("....Instance is scheduled to START now")
        return "start"
    
    return False

def verify_schedule(tags):
    task = 'Validate Tags'
    SuspendSchedule_found = False
    AutoShutdownSchedule_found = False
    SuspendSchedule = None
    AutoShutdownSchedule = None

    for tag in tags:
    
        #check if there is  a tag named 'SuspendSchedule'
        if tag['Key'] == 'SuspendSchedule':
            SuspendSchedule_found = True
            SuspendSchedule = tag['Value']
        
        #check if there is a tag named 'AutoShutdownSchedule'
        if tag['Key'] == 'AutoShutdownSchedule':
            AutoShutdownSchedule_found = True
            AutoShutdownSchedule = tag['Value']
        
    # If there is no tag named 'AutoShutdownSchedule' then Skip the server
    if not AutoShutdownSchedule_found:
        print(f'....{task} : Failed : The Tag "AutoShutdownSchedule" is not found ')
        return False
    # If the tag 'AutoShutdownSchedule' contain no value then Skip the server
    if not AutoShutdownSchedule:
        print(f'....{task} : Failed : The Tag "AutoShutdownSchedule" is empty ')
        return False
    # if SuspendSchedule = Yes/yes skip the serve\
    if SuspendSchedule == 'Yes' or SuspendSchedule == 'yes':
        print(f'....{task} : Failed : The Tag "SuspendSchedule" is set to "Yes" ')
        return False
    #print(f'....{task} : Success : Checking the Start / Stop Schedule ')
    return check_start_stop_schedule(AutoShutdownSchedule)
 
    return False           
    
def startstop_instances():

    instances = ec2.describe_instances()
    start_instances = []
    stop_instances = []
    
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            vmname = list(filter(lambda x: x['Key'] == 'Name' , instance['Tags']))[0]['Value']
            state = instance['State']['Name']
            print(f"Instance : {vmname} , Current State : {state}")
            if 'Tags' in instance:
                result =verify_schedule(instance['Tags']) 
                
                if result == 'start':
                    if state == 'running':
                        print("....Action : No action performed . The server is already in running state")
                    elif state == 'stopped' :
                        print("....Action : This instance is scheduled to START in few mins")
                        start_instances.append({'name' : vmname ,'id' : instance["InstanceId"], 'original_state' : state, 'desired_state' : 'running'}) 
                    else :
                        print(f"....Action : No action performed . Current state = {state} (state should be 'stopped' to perform stop operation) ")
                    
                        
                elif result == 'stop':
                    if state == 'stopped':
                        print("....Action : No action performed . The server is already in stopped state")
                    elif state == 'running':
                        print("....Action : This instance is scheduled to STOP in few mins")
                        stop_instances.append({'name' : vmname ,'id' : instance["InstanceId"], 'original_state' : state, 'desired_state' : 'stopped'})  
                    else:
                        print(f"....Action : No action performed . Current state = {state} (state should be 'running' to perform stop operation). ")
                else:
                    print("....Action : No action is taken for this instance..")     
    
    stop_instacne_count = len(stop_instances)
    start_instacne_count = len(start_instances)
    print('..')
    print(f"Count of Instances to be stopped : {stop_instacne_count}")
    print(f"Count of Instances to be started : {start_instacne_count}")
    
    if stop_instances:
        print('..')
        print("Trying to STOP following instances")
        print("==================================")
        for vm in stop_instances:
            print(vm)
        stop_instance_ids=list(map(lambda x: x['id'], stop_instances))
        r = ec2.stop_instances(InstanceIds=stop_instance_ids)
        print('..')
        print(f"Initiated to stop instances : Printing the results below")
        print("==================================")
        stop_result = r['StoppingInstances']
        for x in stop_result:
            print(x)
        print('..')
    

    if start_instances:
        print('..')
        print("Trying to START following instances ")
        print("==================================")
        for vm in start_instances:
            print(vm)
        start_instance_ids=list(map(lambda x: x['id'], start_instances))
        s =ec2.start_instances(InstanceIds=start_instance_ids)
        print('..')
        print(f"Initiated to start instances : Printing the results below")
        print("==================================")
        start_result = s['StartingInstances']
        for x in start_result:
            print(x)
        print('..')



