import boto3
import datetime, re
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from botocore.exceptions import ClientError
import json

def lambda_handler(event, context):
    snap_del_days = 15 # snapshot will be deleted after 15 days
    max_executions =200 # Do the task only on these number of servers
    AWS_REGION = "us-east-1"
    ec2_resource = boto3.resource('ec2', region_name=AWS_REGION)
    client = boto3.client('ec2',region_name=AWS_REGION)
    STS_CLIENT = boto3.client('sts')
    CURRENT_ACCOUNT_ID = STS_CLIENT.get_caller_identity()['Account']
    snapshots = client.describe_snapshots(OwnerIds=[CURRENT_ACCOUNT_ID])
    total_snapshots = len(snapshots['Snapshots'])
    delete_date = datetime.now() + relativedelta(days=snap_del_days)
    
    print(f"Snapshot Retension duration is {snap_del_days} days")
    print(f"Max Snapshot deletions in this execution is set to {max_executions} ")
    print (f"Total Snapshots found = {total_snapshots} : Current Account ID :{CURRENT_ACCOUNT_ID} : Region: {AWS_REGION}")
    
    
    snapshots_to_tag = []
    snapshots_to_delete = []
    
    for snapshot in snapshots['Snapshots']:
        
        if not 'Tags' in snapshot:
            snapshots_to_tag.append(snapshot['SnapshotId'])
        else:
            # Find Tag named 'Delete_Snapshot'
            pattern = re.compile('^Delete_Snapshot$',re.IGNORECASE)
            deleteSnapTag = [ s for s in snapshot['Tags'] if pattern.match(s['Key']) ]
            if len(deleteSnapTag) == 0 : # if 'Delete_Snapshot' Tag is not found, creating the same
                snapshots_to_tag.append(snapshot['SnapshotId'])
            else:
                delete_schedule = deleteSnapTag[0]['Value'] # get the date from the 'Delete_Snapshot' Tag
                delete_date = datetime.strptime(delete_schedule, '%d/%m/%Y').date() 
                date_now = datetime.now().date()
                days_remaining = (delete_date - date_now).days
                if days_remaining <= 0 :
                    snapshots_to_delete.append(snapshot)
                    
    
    print(f"Snapshots to be tagged = {len(snapshots_to_tag)} ")
    print(f"Snapshots to be deleted = {len(snapshots_to_delete)}")
    
    
    if len(snapshots_to_tag) > 0 :
        print("..")
        # Limiting number of snapshots to tag 
        snapshots_to_tag_sliced = snapshots_to_tag[0:max_executions]
        print(f"Max snapshots to be tagged in this execution : {len(snapshots_to_tag_sliced)}")
        print(f"Appends Tag 'Delete_Snapshot' = {delete_date.strftime('%d/%m/%Y')}  to the following snapshots")
        for x in snapshots_to_tag_sliced:
            print(x)
        client.create_tags(Resources=snapshots_to_tag_sliced,Tags=[{'Key':'Delete_Snapshot', 'Value': delete_date.strftime('%d/%m/%Y')}])
        print("..")
    
    
        
    if len(snapshots_to_delete) > 0 :
        print("..")
        # Limiting number of snapshots to delete
        
        snapshots_to_delete_sliced = snapshots_to_delete[0:max_executions]
        print(f"Max snapshots to be deleted in this execution : {len(snapshots_to_delete_sliced)}")
        print("The following snapshots is going to be deleted")
        for snapshot in snapshots_to_delete_sliced:
            try:
                
                started = snapshot['StartTime']
                print ("...Snapshot ID :" + snapshot['SnapshotId'] + " Created on : "+ str(started) + " from Volume : " + snapshot['VolumeId'] + " with state : " + snapshot['State'])
                client.delete_snapshot(SnapshotId=snapshot['SnapshotId'])
                    
            except ClientError as e:
                if e.response['Error']['Code'] == 'InvalidSnapshot.InUse':
                    print (e.response['Error']['Code'] + ": " + e.response['Error']['Message'])
                else:
                    print("Unexpected error: %s" % e)
       
       
       