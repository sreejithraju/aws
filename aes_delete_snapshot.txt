import boto3
import datetime, re
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from botocore.exceptions import ClientError
import json

def lambda_handler(event, context):
    snap_del_days = 15 # snapshot will be deleted after 15 days
    AWS_REGION = "us-east-1"
    ec2_resource = boto3.resource('ec2', region_name=AWS_REGION)
    client = boto3.client('ec2',region_name=AWS_REGION)
    STS_CLIENT = boto3.client('sts')
    CURRENT_ACCOUNT_ID = STS_CLIENT.get_caller_identity()['Account']
    snapshots = client.describe_snapshots(OwnerIds=[CURRENT_ACCOUNT_ID])
    total_snapshots = len(snapshots['Snapshots'])
    print (f"Total Snapshots found = {total_snapshots} : Current Account ID :{CURRENT_ACCOUNT_ID} : Region: {AWS_REGION}")
    delete_date = datetime.now() + relativedelta(days=snap_del_days)

    for snapshot in snapshots['Snapshots']:
        
        #print(f"ID : {snapshot['SnapshotId']} ")
        if not 'Tags' in snapshot:
            print(f"ID : {snapshot['SnapshotId']} - Tag[Delete_Snapshot] is not found . Creating it : Value = {delete_date.strftime('%d/%m/%Y')} ")
            client.create_tags(Resources=[snapshot['SnapshotId'],],Tags=[{'Key':'Delete_Snapshot', 'Value': delete_date.strftime('%d/%m/%Y')}])
        else:
            # Find Tag named 'Delete_Snapshot'
            pattern = re.compile('^Delete_Snapshot$',re.IGNORECASE)
            deleteSnapTag = [ s for s in snapshot['Tags'] if pattern.match(s['Key']) ]
            if len(deleteSnapTag) == 0 : # if 'Delete_Snapshot' Tag is not found, creating the same
                print(f"ID : {snapshot['SnapshotId']} - Tag[Delete_Snapshot] is not found . Creating it : Value = {delete_date.strftime('%d/%m/%Y')} ")
                client.create_tags(Resources=[snapshot['SnapshotId'],],Tags=[{'Key':'Delete_Snapshot', 'Value': delete_date.strftime('%d/%m/%Y')}])
            
            else:
                delete_schedule = deleteSnapTag[0]['Value'] # get the date from the 'Delete_Snapshot' Tag
                delete_date = datetime.strptime(delete_schedule, '%d/%m/%Y').date() 
                date_now = datetime.now().date()
                days_remaining = (delete_date - date_now).days
                if days_remaining < 0 : 
                    del_msg = f"Time Limit exceeded by {abs(days_remaining)} days. Going to delete now"
                elif days_remaining == 0:
                    del_msg =f"Today is the deletion date. Going to deleted now"
                else:
                    del_msg = f"Will be deleted in {days_remaining} days"
                print(f"ID : {snapshot['SnapshotId']} - Snapshot Deletion date : {delete_date} ; Date now : {date_now} ; {del_msg}")
                
                try:
                    if days_remaining <= 0 :
                        started = snapshot['StartTime']
                        print('...Deleting below Snapshot')
                        print ("...Snapshot ID :" + snapshot['SnapshotId'] + " Created on : "+ str(started) + " from Volume : " + snapshot['VolumeId'] + " with state : " + snapshot['State'])
                        client.delete_snapshot(SnapshotId=snapshot['SnapshotId'])
                        
                except ClientError as e:
                    if e.response['Error']['Code'] == 'InvalidSnapshot.InUse':
                        print (e.response['Error']['Code'] + ": " + e.response['Error']['Message'])
                    else:
                        print("Unexpected error: %s" % e)
           